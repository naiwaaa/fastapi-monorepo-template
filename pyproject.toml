[project]
name = "pyapi"
version = "0.1.0"
description = "Template for FastAPI applications."
readme = "README.md"
license = { file = "LICENSE.md" }
authors = [{ name = "Tho Nguyen", email = "contact@naiwaaa.simplelogin.com" }]
requires-python = ">=3.13,<3.14"
dependencies = []

[tool.uv.workspace]
members = ["pyapi-*"]

[dependency-groups]
dev = [
  "ipykernel>=6.30.1",
  "ruff>=0.13.1",
  # type checking
  "mypy[dmypy,faster-cache]>=1.18.2",
  # testing
  "hypothesis>=6.140.2",
  "pytest>=8.4.2",
  "pytest-asyncio>=1.2.0",
  "pytest-benchmark>=5.1.0",
  "pytest-clarity>=1.0.1",
  "pytest-cov>=7.0.0",
  "pytest-instafail>=0.5.0",
  "pytest-memray>=1.8.0",
  "pytest-mock>=3.15.1",
  "pytest-randomly>=4.0.1",
  "pytest-sugar>=1.1.1",
  "respx>=0.22.0",
]

[tool.mypy]
exclude = [".cache/", ".venv/"]
# disallow dynamic typing
disallow_any_unimported = true
disallow_any_expr = true
disallow_any_decorated = true
disallow_any_explicit = true
disallow_any_generics = true
disallow_subclassing_any = true
# untyped definitions and calls
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
# none and optional handling
implicit_optional = false
strict_optional = true
# configuring warnings
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true
# miscellaneous strictness flags
allow_redefinition = false
enable_error_code = [
  "redundant-self",
  "redundant-expr",
  "possibly-undefined",
  "truthy-bool",
  "truthy-iterable",
  "ignore-without-code",
  "unused-awaitable",
  "unused-ignore",
  "explicit-override",
  "mutable-override",
  "unimported-reveal",
  "exhaustive-match",
]
implicit_reexport = false
strict_concatenate = true
strict_equality = true
strict_equality_for_none = true
strict = true
# configuring error messages
show_error_context = true
show_column_numbers = true
# incremental mode
cache_dir = ".cache/mypy"
# advanced options
# plugins = ["pydantic.mypy"]

[tool.pydantic-mypy]
init_typed = true
init_forbid_extra = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]
addopts = [
  # general
  "--exitfirst",
  "--strict-config",
  "--strict-markers",
  "--failed-first",
  # reporting
  "--durations=5",
  "-vv",
  "--no-header",
  "-ra",
  "--showlocals",
  "--junitxml=.cache/pytest/report.xml",
  # collection
  "--ignore-glob=**/fixtures/*",
  "--import-mode=importlib",
  "--doctest-modules",
  "--doctest-continue-on-failure",
  # pytest-benchmark
  "--benchmark-warmup=on",
  "--benchmark-disable-gc",
  "--benchmark-storage=file://./.cache/benchmarks",
  "--benchmark-sort=mean",
  "--benchmark-columns=min,mean,stddev,outliers,rounds,iterations",
  "--benchmark-disable",
  # pytest-clarity
  "--diff-symbols",
  # pytest-cov
  "--cov",
  "--cov-report=term-missing:skip-covered",
  "--cov-report=xml:.cache/pytest/coverage.xml",
  "--cov-config=pyproject.toml",
  # pytest-instafail
  "--instafail",
  # pytest-memray
  "--memray",
  "--most-allocations=5",
  # hypothesis
  "--hypothesis-show-statistics",
  "--hypothesis-explain",
]
cache_dir = ".cache/pytest"
doctest_optionflags = "NUMBER IGNORE_EXCEPTION_DETAIL"
pythonpath = ["."]
markers = [
  "slow: marks tests as slow",
  "network: marks tests which require network connection. Used in 3rd-party build environments that have network disabled",
]
testpaths = ["tests"]
tmp_path_retention_count = 2
tmp_path_retention_policy = "failed"
# pytest-asyncio
asyncio_default_fixture_loop_scope = "module"
asyncio_default_test_loop_scope = "module"

[tool.coverage.run]
include = ["*/pyapi-*/*"]
branch = true
data_file = ".cache/pytest/coverage"
relative_files = true

[tool.coverage.report]
fail_under = 0
show_missing = true
skip_covered = true
exclude_also = [
  "no cover",
  "if TYPE_CHECKING:",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
]

[tool.commitizen]
name = "cz_conventional_commits"
version_scheme = "pep440"
version_provider = "uv"
